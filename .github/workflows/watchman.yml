name: Build

on:
  pull_request:
    branches:
      master
    push:
      tags:
        - 'v*'

jobs:
  build:
    name: Build Watchman
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
        with:
          ref: ${{ github.ref }}

      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13

      - name: Run Linter
        run: make lint

      - name: Build Binary
        if: success() && contains(github.ref, 'v')
        run: make build

      - name: Create Release
        id: create_release
        if: success() && contains(github.ref, 'v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Extract Version
        if: success() && contains(github.ref, 'v')
        id: extract_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Upload Linux Asset
        if: success() && contains(github.ref, 'v')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./watchman-linux-amd64-${{ steps.extract_version.outputs.VERSION }}.tar.gz
          asset_name: watchman-linux-amd64-${{ steps.extract_version.outputs.VERSION }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Upload MacOS Asset
        if: success() && contains(github.ref, 'v')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./watchman-darwin-amd64-${{ steps.extract_version.outputs.VERSION }}.tar.gz
          asset_name: watchman-darwin-amd64-${{ steps.extract_version.outputs.VERSION }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Upload Windows Asset
        if: success() && contains(github.ref, 'v')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./watchman-windows-amd64-${{ steps.extract_version.outputs.VERSION }}.tar.gz
          asset_name: watchman-windows-amd64-${{ steps.extract_version.outputs.VERSION }}.tar.gz
          asset_content_type: application/tar+gzip